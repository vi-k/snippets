{
  // Place your snippets for dart here. Each snippet is defined under a snippet name and has a prefix, body and
  // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
  // same ids are connected.
  // Example:
  "stfulWithStateScope": {
    "prefix": "stfulWithStateScope",
    "body": [
      "import 'package:flutter/widgets.dart';",
      "import 'package:flutter/foundation.dart';",
      "",
      "@immutable",
      "class $1 extends StatefulWidget {",
      "  const $1({",
      "    Key? key,",
      "    required this.child,",
      "  }) : super(key: key);",
      "",
      "  final Widget child;",
      "",
      "  static _$1State of(BuildContext context, {bool listen = false}) =>",
      "      _$1Scope.of(context, listen: listen).state;",
      "",
      "  @override",
      "  State<$1> createState() => _$1State();",
      "",
      "  @override",
      "  void debugFillProperties(DiagnosticPropertiesBuilder properties) =>",
      "      super.debugFillProperties(",
      "        properties",
      "          ..add(",
      "            StringProperty(",
      "              'description',",
      "              '$1 StatefulWidget',",
      "            ),",
      "          ),",
      "      );",
      "}",
      "",
      "class _$1State extends State<$1> {",
      "  var _needUpdate = false;",
      "",
      "  // Обновление дерева зависимостей.",
      "  void update() {",
      "    setState(() {",
      "      _needUpdate = true;",
      "    });",
      "  }",
      "",
      "  // Первичная инициализация виджета.",
      "  @override",
      "  void initState() {",
      "    super.initState();",
      "  }",
      "",
      "  // Конфигурация виджета изменилась.",
      "  @override",
      "  void didUpdateWidget($1 oldWidget) {",
      "    super.didUpdateWidget(oldWidget);",
      "  }",
      "",
      "  // Изменилась конфигурация InheritedWidget'ов.",
      "  // Также вызывается после initState, но до build'а.",
      "  @override",
      "  void didChangeDependencies() {",
      "    super.didChangeDependencies();",
      "  }",
      "",
      "  // Удаление стейта из дерева.",
      "  @override",
      "  void dispose() {",
      "    super.dispose();",
      "  }",
      "",
      "  @override",
      "  void debugFillProperties(DiagnosticPropertiesBuilder properties) =>",
      "      super.debugFillProperties(",
      "        properties",
      "          ..add(",
      "            StringProperty(",
      "              'description',",
      "              '_$1State State<$1>',",
      "            ),",
      "          ),",
      "      );",
      "",
      "  @override",
      "  Widget build(BuildContext context) => _$1Scope(",
      "        state: this,",
      "        child: widget.child,",
      "      );",
      "}",
      "",
      "@immutable",
      "class _$1Scope extends InheritedWidget {",
      "  const _$1Scope({",
      "    Key? key,",
      "    required this.state,",
      "    required Widget child,",
      "  }) : super(key: key, child: child);",
      "  ",
      "  final _$1State state;",
      "",
      "  /// Ищет _$1Scope в дереве. При необходимости ([listen]) подписываемся.",
      "  static _$1Scope of(BuildContext context, {required bool listen}) => listen",
      "      ? context.dependOnInheritedWidgetOfExactType<_$1Scope>()!",
      "      : context.getElementForInheritedWidgetOfExactType<_$1Scope>()!.widget",
      "          as _$1Scope;",
      "",
      "  @override",
      "  bool updateShouldNotify(_$1Scope oldWidget) {",
      "    final update = state._needUpdate;",
      "    state._needUpdate = false;",
      "    return update;",
      "  }",
      "",
      "  @override",
      "  void debugFillProperties(DiagnosticPropertiesBuilder properties) =>",
      "      super.debugFillProperties(",
      "        properties",
      "          ..add(",
      "            StringProperty(",
      "              'description',",
      "              'Scope of $1',",
      "            ),",
      "          )",
      "          ..add(",
      "            ObjectFlagProperty<_$1State>(",
      "              '_$1State',",
      "              state,",
      "              ifNull: 'none',",
      "            ),",
      "          )",
      "          ..defaultDiagnosticsTreeStyle = DiagnosticsTreeStyle.offstage,",
      "      );",
      "}",
      "$2"
    ],
    "description": "Log output to console"
  }
}